// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foodsystem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_foodsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_foodsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_foodsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_foodsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_foodsystem_2eproto;
namespace foodsystem {
class Ingredient;
class IngredientDefaultTypeInternal;
extern IngredientDefaultTypeInternal _Ingredient_default_instance_;
class IngredientInfo;
class IngredientInfoDefaultTypeInternal;
extern IngredientInfoDefaultTypeInternal _IngredientInfo_default_instance_;
class InventoryInfo;
class InventoryInfoDefaultTypeInternal;
extern InventoryInfoDefaultTypeInternal _InventoryInfo_default_instance_;
class ItemInfo;
class ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class SupplierList;
class SupplierListDefaultTypeInternal;
extern SupplierListDefaultTypeInternal _SupplierList_default_instance_;
}  // namespace foodsystem
PROTOBUF_NAMESPACE_OPEN
template<> ::foodsystem::Ingredient* Arena::CreateMaybeMessage<::foodsystem::Ingredient>(Arena*);
template<> ::foodsystem::IngredientInfo* Arena::CreateMaybeMessage<::foodsystem::IngredientInfo>(Arena*);
template<> ::foodsystem::InventoryInfo* Arena::CreateMaybeMessage<::foodsystem::InventoryInfo>(Arena*);
template<> ::foodsystem::ItemInfo* Arena::CreateMaybeMessage<::foodsystem::ItemInfo>(Arena*);
template<> ::foodsystem::SupplierList* Arena::CreateMaybeMessage<::foodsystem::SupplierList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foodsystem {

// ===================================================================

class Ingredient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foodsystem.Ingredient) */ {
 public:
  Ingredient();
  virtual ~Ingredient();

  Ingredient(const Ingredient& from);
  Ingredient(Ingredient&& from) noexcept
    : Ingredient() {
    *this = ::std::move(from);
  }

  inline Ingredient& operator=(const Ingredient& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ingredient& operator=(Ingredient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ingredient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ingredient* internal_default_instance() {
    return reinterpret_cast<const Ingredient*>(
               &_Ingredient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ingredient& a, Ingredient& b) {
    a.Swap(&b);
  }
  inline void Swap(Ingredient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ingredient* New() const final {
    return CreateMaybeMessage<Ingredient>(nullptr);
  }

  Ingredient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ingredient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ingredient& from);
  void MergeFrom(const Ingredient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ingredient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foodsystem.Ingredient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_foodsystem_2eproto);
    return ::descriptor_table_foodsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:foodsystem.Ingredient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foodsystem_2eproto;
};
// -------------------------------------------------------------------

class SupplierList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foodsystem.SupplierList) */ {
 public:
  SupplierList();
  virtual ~SupplierList();

  SupplierList(const SupplierList& from);
  SupplierList(SupplierList&& from) noexcept
    : SupplierList() {
    *this = ::std::move(from);
  }

  inline SupplierList& operator=(const SupplierList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplierList& operator=(SupplierList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupplierList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupplierList* internal_default_instance() {
    return reinterpret_cast<const SupplierList*>(
               &_SupplierList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SupplierList& a, SupplierList& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplierList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupplierList* New() const final {
    return CreateMaybeMessage<SupplierList>(nullptr);
  }

  SupplierList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupplierList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupplierList& from);
  void MergeFrom(const SupplierList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplierList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foodsystem.SupplierList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_foodsystem_2eproto);
    return ::descriptor_table_foodsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated string items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:foodsystem.SupplierList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foodsystem_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foodsystem.ItemInfo) */ {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemInfo* New() const final {
    return CreateMaybeMessage<ItemInfo>(nullptr);
  }

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foodsystem.ItemInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_foodsystem_2eproto);
    return ::descriptor_table_foodsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // string vendor = 1;
  void clear_vendor();
  const std::string& vendor() const;
  void set_vendor(const std::string& value);
  void set_vendor(std::string&& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  std::string* mutable_vendor();
  std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:foodsystem.ItemInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foodsystem_2eproto;
};
// -------------------------------------------------------------------

class IngredientInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foodsystem.IngredientInfo) */ {
 public:
  IngredientInfo();
  virtual ~IngredientInfo();

  IngredientInfo(const IngredientInfo& from);
  IngredientInfo(IngredientInfo&& from) noexcept
    : IngredientInfo() {
    *this = ::std::move(from);
  }

  inline IngredientInfo& operator=(const IngredientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IngredientInfo& operator=(IngredientInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IngredientInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IngredientInfo* internal_default_instance() {
    return reinterpret_cast<const IngredientInfo*>(
               &_IngredientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IngredientInfo& a, IngredientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IngredientInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IngredientInfo* New() const final {
    return CreateMaybeMessage<IngredientInfo>(nullptr);
  }

  IngredientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IngredientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IngredientInfo& from);
  void MergeFrom(const IngredientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngredientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foodsystem.IngredientInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_foodsystem_2eproto);
    return ::descriptor_table_foodsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string vendors = 2;
  int vendors_size() const;
  private:
  int _internal_vendors_size() const;
  public:
  void clear_vendors();
  const std::string& vendors(int index) const;
  std::string* mutable_vendors(int index);
  void set_vendors(int index, const std::string& value);
  void set_vendors(int index, std::string&& value);
  void set_vendors(int index, const char* value);
  void set_vendors(int index, const char* value, size_t size);
  std::string* add_vendors();
  void add_vendors(const std::string& value);
  void add_vendors(std::string&& value);
  void add_vendors(const char* value);
  void add_vendors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vendors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vendors();
  private:
  const std::string& _internal_vendors(int index) const;
  std::string* _internal_add_vendors();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:foodsystem.IngredientInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vendors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foodsystem_2eproto;
};
// -------------------------------------------------------------------

class InventoryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foodsystem.InventoryInfo) */ {
 public:
  InventoryInfo();
  virtual ~InventoryInfo();

  InventoryInfo(const InventoryInfo& from);
  InventoryInfo(InventoryInfo&& from) noexcept
    : InventoryInfo() {
    *this = ::std::move(from);
  }

  inline InventoryInfo& operator=(const InventoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryInfo& operator=(InventoryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InventoryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InventoryInfo* internal_default_instance() {
    return reinterpret_cast<const InventoryInfo*>(
               &_InventoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InventoryInfo& a, InventoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InventoryInfo* New() const final {
    return CreateMaybeMessage<InventoryInfo>(nullptr);
  }

  InventoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InventoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InventoryInfo& from);
  void MergeFrom(const InventoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InventoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foodsystem.InventoryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_foodsystem_2eproto);
    return ::descriptor_table_foodsystem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteminfoFieldNumber = 1,
  };
  // repeated .foodsystem.ItemInfo iteminfo = 1;
  int iteminfo_size() const;
  private:
  int _internal_iteminfo_size() const;
  public:
  void clear_iteminfo();
  ::foodsystem::ItemInfo* mutable_iteminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foodsystem::ItemInfo >*
      mutable_iteminfo();
  private:
  const ::foodsystem::ItemInfo& _internal_iteminfo(int index) const;
  ::foodsystem::ItemInfo* _internal_add_iteminfo();
  public:
  const ::foodsystem::ItemInfo& iteminfo(int index) const;
  ::foodsystem::ItemInfo* add_iteminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foodsystem::ItemInfo >&
      iteminfo() const;

  // @@protoc_insertion_point(class_scope:foodsystem.InventoryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foodsystem::ItemInfo > iteminfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_foodsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ingredient

// string name = 1;
inline void Ingredient::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Ingredient::name() const {
  // @@protoc_insertion_point(field_get:foodsystem.Ingredient.name)
  return _internal_name();
}
inline void Ingredient::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:foodsystem.Ingredient.name)
}
inline std::string* Ingredient::mutable_name() {
  // @@protoc_insertion_point(field_mutable:foodsystem.Ingredient.name)
  return _internal_mutable_name();
}
inline const std::string& Ingredient::_internal_name() const {
  return name_.GetNoArena();
}
inline void Ingredient::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Ingredient::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foodsystem.Ingredient.name)
}
inline void Ingredient::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foodsystem.Ingredient.name)
}
inline void Ingredient::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foodsystem.Ingredient.name)
}
inline std::string* Ingredient::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Ingredient::release_name() {
  // @@protoc_insertion_point(field_release:foodsystem.Ingredient.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Ingredient::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:foodsystem.Ingredient.name)
}

// -------------------------------------------------------------------

// SupplierList

// repeated string items = 1;
inline int SupplierList::_internal_items_size() const {
  return items_.size();
}
inline int SupplierList::items_size() const {
  return _internal_items_size();
}
inline void SupplierList::clear_items() {
  items_.Clear();
}
inline std::string* SupplierList::add_items() {
  // @@protoc_insertion_point(field_add_mutable:foodsystem.SupplierList.items)
  return _internal_add_items();
}
inline const std::string& SupplierList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const std::string& SupplierList::items(int index) const {
  // @@protoc_insertion_point(field_get:foodsystem.SupplierList.items)
  return _internal_items(index);
}
inline std::string* SupplierList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:foodsystem.SupplierList.items)
  return items_.Mutable(index);
}
inline void SupplierList::set_items(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:foodsystem.SupplierList.items)
  items_.Mutable(index)->assign(value);
}
inline void SupplierList::set_items(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:foodsystem.SupplierList.items)
  items_.Mutable(index)->assign(std::move(value));
}
inline void SupplierList::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:foodsystem.SupplierList.items)
}
inline void SupplierList::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:foodsystem.SupplierList.items)
}
inline std::string* SupplierList::_internal_add_items() {
  return items_.Add();
}
inline void SupplierList::add_items(const std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:foodsystem.SupplierList.items)
}
inline void SupplierList::add_items(std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:foodsystem.SupplierList.items)
}
inline void SupplierList::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:foodsystem.SupplierList.items)
}
inline void SupplierList::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:foodsystem.SupplierList.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SupplierList::items() const {
  // @@protoc_insertion_point(field_list:foodsystem.SupplierList.items)
  return items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SupplierList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:foodsystem.SupplierList.items)
  return &items_;
}

// -------------------------------------------------------------------

// ItemInfo

// string vendor = 1;
inline void ItemInfo::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ItemInfo::vendor() const {
  // @@protoc_insertion_point(field_get:foodsystem.ItemInfo.vendor)
  return _internal_vendor();
}
inline void ItemInfo::set_vendor(const std::string& value) {
  _internal_set_vendor(value);
  // @@protoc_insertion_point(field_set:foodsystem.ItemInfo.vendor)
}
inline std::string* ItemInfo::mutable_vendor() {
  // @@protoc_insertion_point(field_mutable:foodsystem.ItemInfo.vendor)
  return _internal_mutable_vendor();
}
inline const std::string& ItemInfo::_internal_vendor() const {
  return vendor_.GetNoArena();
}
inline void ItemInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ItemInfo::set_vendor(std::string&& value) {
  
  vendor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foodsystem.ItemInfo.vendor)
}
inline void ItemInfo::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foodsystem.ItemInfo.vendor)
}
inline void ItemInfo::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foodsystem.ItemInfo.vendor)
}
inline std::string* ItemInfo::_internal_mutable_vendor() {
  
  return vendor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ItemInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:foodsystem.ItemInfo.vendor)
  
  return vendor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ItemInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:foodsystem.ItemInfo.vendor)
}

// double price = 2;
inline void ItemInfo::clear_price() {
  price_ = 0;
}
inline double ItemInfo::_internal_price() const {
  return price_;
}
inline double ItemInfo::price() const {
  // @@protoc_insertion_point(field_get:foodsystem.ItemInfo.price)
  return _internal_price();
}
inline void ItemInfo::_internal_set_price(double value) {
  
  price_ = value;
}
inline void ItemInfo::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:foodsystem.ItemInfo.price)
}

// -------------------------------------------------------------------

// IngredientInfo

// string name = 1;
inline void IngredientInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IngredientInfo::name() const {
  // @@protoc_insertion_point(field_get:foodsystem.IngredientInfo.name)
  return _internal_name();
}
inline void IngredientInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:foodsystem.IngredientInfo.name)
}
inline std::string* IngredientInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:foodsystem.IngredientInfo.name)
  return _internal_mutable_name();
}
inline const std::string& IngredientInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void IngredientInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IngredientInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foodsystem.IngredientInfo.name)
}
inline void IngredientInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foodsystem.IngredientInfo.name)
}
inline void IngredientInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foodsystem.IngredientInfo.name)
}
inline std::string* IngredientInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IngredientInfo::release_name() {
  // @@protoc_insertion_point(field_release:foodsystem.IngredientInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IngredientInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:foodsystem.IngredientInfo.name)
}

// repeated string vendors = 2;
inline int IngredientInfo::_internal_vendors_size() const {
  return vendors_.size();
}
inline int IngredientInfo::vendors_size() const {
  return _internal_vendors_size();
}
inline void IngredientInfo::clear_vendors() {
  vendors_.Clear();
}
inline std::string* IngredientInfo::add_vendors() {
  // @@protoc_insertion_point(field_add_mutable:foodsystem.IngredientInfo.vendors)
  return _internal_add_vendors();
}
inline const std::string& IngredientInfo::_internal_vendors(int index) const {
  return vendors_.Get(index);
}
inline const std::string& IngredientInfo::vendors(int index) const {
  // @@protoc_insertion_point(field_get:foodsystem.IngredientInfo.vendors)
  return _internal_vendors(index);
}
inline std::string* IngredientInfo::mutable_vendors(int index) {
  // @@protoc_insertion_point(field_mutable:foodsystem.IngredientInfo.vendors)
  return vendors_.Mutable(index);
}
inline void IngredientInfo::set_vendors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:foodsystem.IngredientInfo.vendors)
  vendors_.Mutable(index)->assign(value);
}
inline void IngredientInfo::set_vendors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:foodsystem.IngredientInfo.vendors)
  vendors_.Mutable(index)->assign(std::move(value));
}
inline void IngredientInfo::set_vendors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vendors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:foodsystem.IngredientInfo.vendors)
}
inline void IngredientInfo::set_vendors(int index, const char* value, size_t size) {
  vendors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:foodsystem.IngredientInfo.vendors)
}
inline std::string* IngredientInfo::_internal_add_vendors() {
  return vendors_.Add();
}
inline void IngredientInfo::add_vendors(const std::string& value) {
  vendors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:foodsystem.IngredientInfo.vendors)
}
inline void IngredientInfo::add_vendors(std::string&& value) {
  vendors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:foodsystem.IngredientInfo.vendors)
}
inline void IngredientInfo::add_vendors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vendors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:foodsystem.IngredientInfo.vendors)
}
inline void IngredientInfo::add_vendors(const char* value, size_t size) {
  vendors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:foodsystem.IngredientInfo.vendors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IngredientInfo::vendors() const {
  // @@protoc_insertion_point(field_list:foodsystem.IngredientInfo.vendors)
  return vendors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IngredientInfo::mutable_vendors() {
  // @@protoc_insertion_point(field_mutable_list:foodsystem.IngredientInfo.vendors)
  return &vendors_;
}

// -------------------------------------------------------------------

// InventoryInfo

// repeated .foodsystem.ItemInfo iteminfo = 1;
inline int InventoryInfo::_internal_iteminfo_size() const {
  return iteminfo_.size();
}
inline int InventoryInfo::iteminfo_size() const {
  return _internal_iteminfo_size();
}
inline void InventoryInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
inline ::foodsystem::ItemInfo* InventoryInfo::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:foodsystem.InventoryInfo.iteminfo)
  return iteminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foodsystem::ItemInfo >*
InventoryInfo::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:foodsystem.InventoryInfo.iteminfo)
  return &iteminfo_;
}
inline const ::foodsystem::ItemInfo& InventoryInfo::_internal_iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline const ::foodsystem::ItemInfo& InventoryInfo::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:foodsystem.InventoryInfo.iteminfo)
  return _internal_iteminfo(index);
}
inline ::foodsystem::ItemInfo* InventoryInfo::_internal_add_iteminfo() {
  return iteminfo_.Add();
}
inline ::foodsystem::ItemInfo* InventoryInfo::add_iteminfo() {
  // @@protoc_insertion_point(field_add:foodsystem.InventoryInfo.iteminfo)
  return _internal_add_iteminfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::foodsystem::ItemInfo >&
InventoryInfo::iteminfo() const {
  // @@protoc_insertion_point(field_list:foodsystem.InventoryInfo.iteminfo)
  return iteminfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace foodsystem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_foodsystem_2eproto
