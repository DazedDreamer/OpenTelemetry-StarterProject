// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: foodsystem.proto

#include "foodsystem.pb.h"
#include "foodsystem.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace foodsystem {

static const char* FoodSystem_method_names[] = {
  "/foodsystem.FoodSystem/GetSuppliers",
  "/foodsystem.FoodSystem/GetInfoFromVendors",
};

std::unique_ptr< FoodSystem::Stub> FoodSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FoodSystem::Stub> stub(new FoodSystem::Stub(channel));
  return stub;
}

FoodSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetSuppliers_(FoodSystem_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInfoFromVendors_(FoodSystem_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FoodSystem::Stub::GetSuppliers(::grpc::ClientContext* context, const ::foodsystem::Ingredient& request, ::foodsystem::SupplierList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSuppliers_, context, request, response);
}

void FoodSystem::Stub::experimental_async::GetSuppliers(::grpc::ClientContext* context, const ::foodsystem::Ingredient* request, ::foodsystem::SupplierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSuppliers_, context, request, response, std::move(f));
}

void FoodSystem::Stub::experimental_async::GetSuppliers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::foodsystem::SupplierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSuppliers_, context, request, response, std::move(f));
}

void FoodSystem::Stub::experimental_async::GetSuppliers(::grpc::ClientContext* context, const ::foodsystem::Ingredient* request, ::foodsystem::SupplierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSuppliers_, context, request, response, reactor);
}

void FoodSystem::Stub::experimental_async::GetSuppliers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::foodsystem::SupplierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSuppliers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::foodsystem::SupplierList>* FoodSystem::Stub::AsyncGetSuppliersRaw(::grpc::ClientContext* context, const ::foodsystem::Ingredient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::foodsystem::SupplierList>::Create(channel_.get(), cq, rpcmethod_GetSuppliers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::foodsystem::SupplierList>* FoodSystem::Stub::PrepareAsyncGetSuppliersRaw(::grpc::ClientContext* context, const ::foodsystem::Ingredient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::foodsystem::SupplierList>::Create(channel_.get(), cq, rpcmethod_GetSuppliers_, context, request, false);
}

::grpc::Status FoodSystem::Stub::GetInfoFromVendors(::grpc::ClientContext* context, const ::foodsystem::IngredientInfo& request, ::foodsystem::InventoryInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfoFromVendors_, context, request, response);
}

void FoodSystem::Stub::experimental_async::GetInfoFromVendors(::grpc::ClientContext* context, const ::foodsystem::IngredientInfo* request, ::foodsystem::InventoryInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfoFromVendors_, context, request, response, std::move(f));
}

void FoodSystem::Stub::experimental_async::GetInfoFromVendors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::foodsystem::InventoryInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfoFromVendors_, context, request, response, std::move(f));
}

void FoodSystem::Stub::experimental_async::GetInfoFromVendors(::grpc::ClientContext* context, const ::foodsystem::IngredientInfo* request, ::foodsystem::InventoryInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfoFromVendors_, context, request, response, reactor);
}

void FoodSystem::Stub::experimental_async::GetInfoFromVendors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::foodsystem::InventoryInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfoFromVendors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::foodsystem::InventoryInfo>* FoodSystem::Stub::AsyncGetInfoFromVendorsRaw(::grpc::ClientContext* context, const ::foodsystem::IngredientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::foodsystem::InventoryInfo>::Create(channel_.get(), cq, rpcmethod_GetInfoFromVendors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::foodsystem::InventoryInfo>* FoodSystem::Stub::PrepareAsyncGetInfoFromVendorsRaw(::grpc::ClientContext* context, const ::foodsystem::IngredientInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::foodsystem::InventoryInfo>::Create(channel_.get(), cq, rpcmethod_GetInfoFromVendors_, context, request, false);
}

FoodSystem::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FoodSystem_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FoodSystem::Service, ::foodsystem::Ingredient, ::foodsystem::SupplierList>(
          [](FoodSystem::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::foodsystem::Ingredient* req,
             ::foodsystem::SupplierList* resp) {
               return service->GetSuppliers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FoodSystem_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FoodSystem::Service, ::foodsystem::IngredientInfo, ::foodsystem::InventoryInfo>(
          [](FoodSystem::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::foodsystem::IngredientInfo* req,
             ::foodsystem::InventoryInfo* resp) {
               return service->GetInfoFromVendors(ctx, req, resp);
             }, this)));
}

FoodSystem::Service::~Service() {
}

::grpc::Status FoodSystem::Service::GetSuppliers(::grpc::ServerContext* context, const ::foodsystem::Ingredient* request, ::foodsystem::SupplierList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FoodSystem::Service::GetInfoFromVendors(::grpc::ServerContext* context, const ::foodsystem::IngredientInfo* request, ::foodsystem::InventoryInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace foodsystem

